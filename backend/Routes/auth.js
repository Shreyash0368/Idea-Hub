const express = require('express');
const router = express.Router()
const { check, validationResult } = require('express-validator');
const jwt = require('jsonwebtoken');
const bcrypt = require("bcrypt")

const User = require('../Models/User');
const JWT_SECRET = 'Sh$124hshs@';
const fetchuser = require('../middleware/fetchuser');

// middleware that is specific to this router
const signUpValidatorArr = [
    check('name').trim().escape().notEmpty().withMessage('User name can not be empty!').bail().isLength({ min: 3 }).withMessage('Minimum 3 characters required!'),
    check('emailID').trim().normalizeEmail().notEmpty().withMessage('Invalid email address!').bail().isEmail().withMessage('Invalid email address!'),
    check('password').trim().escape().notEmpty().withMessage('Password can not be empty!').bail().isLength({ min: 8 }).withMessage('Minimum 8 characters required!')
]

// define the home page route
router.post('/signup', signUpValidatorArr, async (req, res) => {
    let success = false;
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(422).json({success, errors: errors.array() });
    }
    const { name, emailID, password } = req.body;

    // hashing password value (the salt is automatically generated by bcrypt)
    const hashedPassword = await bcrypt.hash(password, 10);
    // Create a new user object
    const newUser = new User({ name, emailID, password });
    newUser.password = hashedPassword;

    // Save the user to the database
    newUser.save()
        .then((savedUser) => {
            const data = {
                user: {
                    id: newUser.id
                }
            };
            const authtoken = jwt.sign(data, JWT_SECRET)
            // User created successfully
            success = true;
            return res.status(201).json({success, authtoken });
        })
        .catch((err) => {
            if (err.code === 11000) {
                // Email address already exists
                return res.status(400).json({success, message: 'Email address already exists!' });
            } else {
                // Other error
                return res.status(500).json({success, message: 'An error occurred while creating the user.', error: err });
            }
        });

})

const loginValidatorArr = [
    check('password').trim().escape().notEmpty().withMessage('Invalid Password!').bail().isLength({ min: 3 }).withMessage('Minimum 3 characters required!'),
    check('emailID').trim().normalizeEmail().notEmpty().withMessage('Invalid email address!').bail().isEmail().withMessage('Invalid email address!')
]

router.post('/login', loginValidatorArr, async (req, res) => {
    let success = false;
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(422).json({success, errors: errors.array() });
    }
    const { emailID, password } = req.body;

    try {
        const user = await User.findOne({ emailID });

        // Check if the user exists
        if (!user) {
            return res.status(401).json({success, error: 'Invalid Credentials' });
        }

        // Compare the provided password with the hashed password in the database
        const passwordMatch = await bcrypt.compare(password, user.password);
        if (!passwordMatch) {
            return res.status(401).json({success, error: 'Invalid Credentials' });
        }

        const data = {
            user: {
                id: user.id
            }
        };
        const authtoken = jwt.sign(data, JWT_SECRET)

        // Passwords match, login successful
        success = true;
        return res.json({success, authtoken});
    }
    catch (error) {
        console.error('Error:', error);
        return res.status(500).json({success, error: 'Internal Server Error' });
    }
});

router.get('/getUser', fetchuser, async (req, res) => {
    let success = false;
    try {
        const userid = req.userid;
        const user = await User.findById(userid).select("-password");
        success = true;
        return res.json({success, user});
    } catch (error) {
        return res.status(500).json({success, error: 'Internal Server Error' });
    }
})


module.exports = router